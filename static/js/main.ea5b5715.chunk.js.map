{"version":3,"sources":["components/tablet/components/core/status/Status.module.scss","components/tablet/components/core/contentPane/ContentPane.module.scss","components/tablet/components/core/tablet/Tablet.module.scss","components/tablet/components/core/navigation/RippleButtons.tsx","components/tablet/components/core/navigation/Navigation.tsx","components/tablet/config/routes.ts","components/tablet/components/core/contentPane/ContentPane.tsx","components/tablet/tools/time.ts","components/tablet/components/core/status/Status.tsx","components/tablet/hooks/async.ts","components/tablet/components/core/tablet/Tablet.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/tablet/components/core/navigation/Navigation.module.scss"],"names":["module","exports","RippleButton","onClick","children","className","styles","navigation_icon","RouterButton","route","callback","history","useHistory","handleClick","useCallback","push","OpenedAppListNavigation","navigation_icon__background","ROUTE_ROOT","HomeNavigationButton","navigation_icon__home","ReturnNavigationButton","goBack","navigation_icon__return","Navigation","navigation","ContentPane","contentPane","getTime","_padTime","time","slice","date","Date","hours","getHours","minutes","getMinutes","Time","useState","setTime","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","status_collection__time","Notifications","SideStatus","StatusFirstGroup","Status","status","Tablet","tablet","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea5b5715.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"Status_status__Govmk\",\"status_collection__time\":\"Status_status_collection__time__1RQxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentPane\":\"ContentPane_contentPane__2v2jX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"Tablet_tablet__1T9S7\"};","import { FunctionComponent } from 'react'\nimport styles from './Navigation.module.scss'\n\ntype TRippleButtonProps = {\n  onClick: () => void\n}\n\nexport const RippleButton: FunctionComponent<TRippleButtonProps> = ({\n  onClick,\n  children,\n}) => {\n  return (\n    <button className={styles.navigation_icon} onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n","import { useCallback } from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROUTE_OPENED_APPS, ROUTE_ROOT } from '../../../config/routes'\r\nimport { RippleButton } from './RippleButtons'\r\nimport styles from './Navigation.module.scss'\r\n\r\n/**\r\n * Navigation consists of three buttons\r\n * - opened app list   : routes to '/openedApps\r\n * - home       : routes to '/'\r\n * - return     : routes to previous page - history.goBack()\r\n *\r\n * These navigation share similar features\r\n * The difference is the shape and the routes\r\n * Return doesn't use a string for a route, rather it uses history to return\r\n *\r\n * These buttons require icons. There's already scss prepared\r\n */\r\ntype TRouterButtonTypes = {\r\n  callback?: () => void\r\n  route?: string\r\n  className: string\r\n}\r\n\r\nconst RouterButton: FunctionComponent<TRouterButtonTypes> = (\r\n  { route, callback, className }\r\n) => {\r\n  const history = useHistory()\r\n  const handleClick = useCallback(() => {\r\n    if (callback) return callback\r\n\r\n    if (route) return () => history.push(route)\r\n  }, [route, callback, history])\r\n  return (\r\n    <RippleButton onClick={handleClick}>\r\n      <div className={className} />\r\n    </RippleButton>\r\n  )\r\n}\r\n\r\nconst OpenedAppListNavigation = () => (\r\n  <RouterButton \r\n    className={styles.navigation_icon__background} \r\n    route={ROUTE_OPENED_APPS}\r\n  />\r\n)\r\n\r\nconst HomeNavigationButton = () => (\r\n  <RouterButton \r\n    className={styles.navigation_icon__home} \r\n    route={ROUTE_ROOT}\r\n  />\r\n)\r\n\r\nconst ReturnNavigationButton = () => {\r\n  const history = useHistory()\r\n  const handleClick = useCallback(() => history.goBack(), [history])\r\n  return (\r\n    <RouterButton \r\n      className={styles.navigation_icon__return} \r\n      callback={handleClick}\r\n    />\r\n  )\r\n}\r\n\r\nexport const Navigation = () => (\r\n  <div className={styles.navigation}>\r\n    <OpenedAppListNavigation />\r\n    <HomeNavigationButton />\r\n    <ReturnNavigationButton />\r\n  </div>\r\n)\r\n","\r\n// ! Assume \"/\" is the route root of the table\r\n// ! If this component is used as a sub component, then there may be issues\r\n// ! '/' may not actually be home of the tablet, rather home of the parent\r\n\r\nconst ROUTE_ROOT = \"/\"\r\n\r\nconst ROUTE_OPENED_APPS = ROUTE_ROOT + 'opened-apps'\r\n\r\nexport {\r\n  ROUTE_ROOT,\r\n  ROUTE_OPENED_APPS,\r\n}","import { FunctionComponent } from 'react'\r\nimport styles from './ContentPane.module.scss'\r\n\r\n/**\r\n * Main component\r\n *\r\n * The content pane is made up of several components\r\n *\r\n * The main components:\r\n * - home app pages\r\n * - opened app\r\n * - app list\r\n *\r\n * These main components uses react router\r\n *\r\n * For example:\r\n * - '/'        : is the home page. It is always open?\r\n * - '/:appName : is the opened app name\r\n * - '/apps     : is the app list\r\n *\r\n * Home page consists of apps, folders and widgets\r\n * - folder     : contains apps. No nesting of folders. Uses one grid slot\r\n * - app        : an application that can be opened, deleted, analyzed. Uses on grid slot\r\n * - widget     : an app that is directly on the home page such as time, weather\r\n *\r\n * With widgets, either the page grid slots or the widget size needs to be restricted.\r\n * The widget size will be restricted\r\n */\r\n\r\ntype TPosition = { x: number; y: number }\r\ntype TDimension = TPosition\r\n\r\n// App types\r\ntype TApp = { name: string; route: string, icon: JSX.Element }\r\ntype TWidgetApp = { name: string; dimension: TDimension }\r\ntype TFolderApp = { name: string; apps: TApp[] }\r\n\r\n// Component props\r\ntype TWidgetAppProps = {}\r\ntype TFolderAppProps = {}\r\ntype TAppProps = {}\r\n\r\ntype THomePaneProps = {}\r\ntype TAppPaneProps = {}\r\ntype TAppListPaneProps = {}\r\n\r\ntype TContentPaneProps = {}\r\n\r\n// Content types\r\nexport const WidgetApp = () => {}\r\nexport const FolderApp = () => {}\r\nexport const App = () => {}\r\n\r\nexport const HomePane = () => {}\r\nexport const AppPane = () => {}\r\nexport const AppListPane = () => {}\r\n\r\nexport const ContentPane = () => (\r\n  <div className={styles.contentPane}>\r\n\r\n  </div>\r\n)\r\n","export const getTime = () => {\n  const _padTime = (time: number) => ('0' + time).slice(-2)\n\n  const date = new Date()\n  const hours = _padTime(date.getHours())\n  const minutes = _padTime(date.getMinutes())\n  // const seconds = _padTime(date.getSeconds())\n  // return `${hours}:${minutes}:${seconds}`\n  return `${hours}:${minutes}`\n}\n","import { useState } from 'react'\nimport { useInterval } from '../../../hooks/async'\nimport styles from './Status.module.scss'\nimport { getTime } from '../../../tools/time'\n\n/**\n * Status contains three main components\n * - Status\n * - Utilities\n *\n * Status contains\n * - time\n * - notifications\n * - various side status - wifi, mobile usage, etc\n *\n * Utilities contains shortcut settings\n * - airplane mode\n * - wifi\n * - etc\n */\n\n// TODO adjust for user timezone\nconst Time = () => {\n  const [time, setTime] = useState(getTime())\n  useInterval(() => setTime(getTime()), 60 * 1000)\n  return <div className={styles.status_collection__time}>{time}</div>\n}\n\nexport const Notifications = () => <div />\nexport const SideStatus = () => <div />\n\nconst StatusFirstGroup = () => (\n  <div>\n    <Time />\n    <Notifications />\n  </div>\n)\n\nexport const Status = () => (\n  <div className={styles.status}>\n    <StatusFirstGroup />\n    <SideStatus />\n  </div>\n)\n","import { useRef, useEffect } from 'react'\n\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const useInterval = (callback: () => void, delay: number) => {\n  const savedCallback = useRef<any>()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current()\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n","import { FunctionComponent } from 'react'\nimport { Navigation } from '../navigation/Navigation'\nimport { ContentPane } from '../contentPane/ContentPane'\nimport { Status } from '../status/Status'\nimport styles from './Tablet.module.scss'\n\nexport type TApp = any\nexport type TTablet = {\n  isRouted?: boolean\n  apps?: TApp[]\n}\n\n/**\n * Tablet should take in custom user preferences and custom apps\n */\nexport const Tablet: FunctionComponent<TTablet> = () => {\n  return (\n    <div className={styles.tablet}>\n      <Status />\n      <ContentPane />\n      <Navigation />\n    </div>\n  )\n}\n","import './App.css'\nimport { Tablet } from './components/tablet/components/core/tablet/Tablet'\n\nconst App = () => (\n  <div className=\"App\">\n    <Tablet />\n  </div>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__3nZbf\",\"navigation_icon\":\"Navigation_navigation_icon__x-Q7i\",\"navigation_icon__return\":\"Navigation_navigation_icon__return__2O0YF\",\"navigation_icon__home\":\"Navigation_navigation_icon__home__3SNTe\",\"navigation_icon__background\":\"Navigation_navigation_icon__background__1U6c4\"};"],"sourceRoot":""}